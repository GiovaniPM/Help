# -*- coding: utf-8 -*-
"""
Script para automa√ß√£o de cria√ß√£o de issues no Jira a partir de uma planilha Excel.

Este script l√™ uma planilha com detalhes de projetos, extrai as informa√ß√µes
necess√°rias, e cria automaticamente √âpicos, Est√≥rias e Tarefas no Jira.
Ap√≥s a cria√ß√£o, ele atualiza a planilha com os IDs dos tickets gerados.

Pr√©-requisitos:
- Python 3.x
- Bibliotecas: pandas, openpyxl, numpy, jiralib (customizada)
- Arquivo 'setup.json' com as credenciais e URL do Jira.
- Planilha Excel no formato esperado.

Como executar:
python processa_refatorado.py --nome "SuaPlanilha.xlsx"
"""

import argparse
import jiralib
import json
import sys
from typing import Dict, Any, List

import pandas as pd
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows

# --- 1. CONFIGURA√á√ïES E CONSTANTES GLOBAIS ---
# Definir constantes melhora a legibilidade e facilita a manuten√ß√£o!
ABA_PLANILHA = "Planilha"
ABA_PARAMETROS = "Par√¢metros"
SETUP_FILE = "setup.json"

# Colunas essenciais que esperamos encontrar na planilha.
COLUNAS_DESEJADAS = [
    "Projeto", "Data", "Request", "Task", "M√≥dulo", "Tipo", "Usu√°rio Projeto",
    "UUID PO", "UUID Recurso", "√âpico", "Est√≥ria", "Tarefa", "Etapa",
    "Horas", "Pontos", "TicketE", "TicketS", "TicketT"
]

def parse_argumentos() -> str:
    """
    Analisa os argumentos da linha de comando para obter o nome do arquivo.
    √â uma √≥tima pr√°tica isolar a l√≥gica de parsing!
    """
    parser = argparse.ArgumentParser(
        description="Processa uma planilha Excel para criar issues no Jira."
    )
    parser.add_argument(
        '--nome',
        type=str,
        required=True,
        help='Nome do arquivo da planilha Excel a ser processada.'
    )
    args = parser.parse_args()
    return args.nome

def carregar_configuracoes_jira() -> None:
    """
    Carrega as configura√ß√µes de conex√£o com o Jira a partir do arquivo setup.json.
    Isso mant√©m as credenciais e a URL fora do c√≥digo, o que √© mais seguro!
    """
    try:
        with open(SETUP_FILE, 'r', encoding='utf-8') as f:
            config = json.load(f)
            # Supondo que 'jiralib' seja um m√≥dulo que voc√™ tem.
            # Se n√£o for, voc√™ precisar√° importar ou definir 'jiralib'.
            jiralib.url = config['url']
            jiralib.headers = config['headers']
            print("‚úì Configura√ß√µes do Jira carregadas com sucesso!")
    except FileNotFoundError:
        print(f"‚ùå Erro: Arquivo de configura√ß√£o '{SETUP_FILE}' n√£o encontrado.")
        sys.exit(1) # Encerra o script se o arquivo de configura√ß√£o n√£o existir.
    except KeyError:
        print(f"‚ùå Erro: O arquivo '{SETUP_FILE}' est√° mal formatado. 'url' ou 'headers' n√£o encontrados.")
        sys.exit(1)

def preparar_dataframe(arquivo_excel: str) -> pd.DataFrame:
    """
    L√™ a planilha e prepara o DataFrame para o processamento.
    Limpa os dados, preenche valores nulos e cria colunas customizadas.
    """
    print("üöÄ Iniciando a leitura e prepara√ß√£o dos dados da planilha...")
    
    # Usar um bloco try-except para ler o arquivo √© uma boa pr√°tica para capturar erros.
    try:
        df = pd.read_excel(arquivo_excel, sheet_name=ABA_PLANILHA, engine="openpyxl")
    except FileNotFoundError:
        print(f"‚ùå Erro: A planilha '{arquivo_excel}' n√£o foi encontrada.")
        sys.exit(1)
    except ValueError as e:
        print(f"‚ùå Erro ao ler a aba '{ABA_PLANILHA}': {e}")
        sys.exit(1)
        
    # Seleciona apenas as colunas que vamos usar para manter o DataFrame limpo.
    df = df[COLUNAS_DESEJADAS].copy()

    # Preenche valores NaN (nulos) para evitar erros na concatena√ß√£o de strings.
    # Usar um dicion√°rio torna o c√≥digo mais limpo e organizado!
    valores_padrao = {
        "√âpico": "", "Est√≥ria": "", "Request": "", "Task": "",
        "Tipo": "", "TicketE": "0", "TicketS": "0", "TicketT": "0"
    }
    df.fillna(valores_padrao, inplace=True)

    # Cria√ß√£o das colunas com nomes formatados para o Jira usando f-strings.
    # f-strings s√£o mais r√°pidas e leg√≠veis que a concatena√ß√£o tradicional!
    df["Nome √âpico"] = df.apply(
        lambda row: f"[{row['Request']}] - {row['√âpico']}", axis=1
    )
    df["Nome Est√≥ria"] = df.apply(
        lambda row: f"[{row['Tipo']}] - [{row['Task']}] - {row['Est√≥ria']}", axis=1
    )
    df["UUID_PO"] = df.apply(
        lambda row: f"{row['UUID PO']}", axis=1
    )    
    df["UUID_Recurso"] = df.apply(
        lambda row: f"{row['UUID Recurso']}", axis=1
    )    

    print("‚úì DataFrame preparado com sucesso!")
    return df

def processar_issues_jira(df: pd.DataFrame) -> Dict[str, List[Any]]:
    """
    Itera sobre o DataFrame e cria √âpicos, Est√≥rias e Tarefas no Jira.
    Esta √© a fun√ß√£o principal que interage com a API do Jira!
    """

    # Listas para armazenar os tickets criados.
    epicos_criados = set()
    estorias_criadas = set()
    
    # Dicion√°rio para armazenar os resultados.
    resultados = {
        "Ticket_Epico": [],
        "Ticket_Estoria": [],
        "Ticket_Task": []
    }

    last_epic_key = None
    last_story_key = None
    
    print("\nüî• Come√ßando a integra√ß√£o com o Jira! Criando issues...")

    # Iterar com df.itertuples() √© mais perform√°tico que to_dict.
    for row in df.itertuples():
        
        # --- CRIA√á√ÉO DO √âPICO ---
        # A chave √∫nica para identificar se um √©pico j√° foi criado nesta execu√ß√£o.
        epic_key_identificador = f"[{row.Request}] - {row.√âpico}"
        
        if epic_key_identificador not in epicos_criados:
            if row.TicketE == "0":
                print(f"‚ú® Criando √âpico: {row._19}") # _19 √© o √≠ndice de "Nome √âpico"
                try:
                    response = jiralib.create_epic(
                        row.Projeto, row._19, row._19, row.Data, row._19,
                        row._7, row.Task, row.M√≥dulo, row.Tipo #_7 √© "Usu√°rio Projeto"
                    )
                    response.raise_for_status() # Lan√ßa um erro para respostas HTTP 4xx/5xx
                    last_epic_key = response.json().get("key")
                    print(f"    ‚úÖ Sucesso! Chave do √âpico: {last_epic_key}")
                except Exception as e:
                    print(f"    ‚ùå Falha ao criar √âpico. Erro: {e}")
                    last_epic_key = "ERRO"
            else:
                last_epic_key = row.TicketE
                print(f"‚è≠Ô∏è  Pulando √âpico j√° existente: {row._19} ({last_epic_key})")
            
            epicos_criados.add(epic_key_identificador)

        # --- CRIA√á√ÉO DA EST√ìRIA ---
        story_key_identificador = f"[{row.Task}] - {row.Est√≥ria}"

        if story_key_identificador not in estorias_criadas:
            if row.TicketS == "0":
                print(f"  ‚ú® Criando Est√≥ria: {row._20}") # _20 √© o √≠ndice de "Nome Est√≥ria"
                try:
                    response = jiralib.create_story(
                        row.Projeto, "Hist√≥ria", row._20, row._20, row.UUID_Recurso,
                        row.UUID_PO, row.UUID_Recurso, last_epic_key, row.Pontos
                    )
                    response.raise_for_status()
                    last_story_key = response.json().get("key")
                    print(f"      ‚úÖ Sucesso! Chave da Est√≥ria: {last_story_key}")
                except Exception as e:
                    print(f"      ‚ùå Falha ao criar Est√≥ria. Erro: {e}")
                    last_story_key = "ERRO"
            else:
                last_story_key = row.TicketS
                print(f"  ‚è≠Ô∏è  Pulando Est√≥ria j√° existente: {row._20} ({last_story_key})")
                
            estorias_criadas.add(story_key_identificador)

        # --- CRIA√á√ÉO DA TAREFA ---
        if row.TicketT == "0":
            print(f"    ‚ú® Criando Tarefa: {row.Tarefa}")
            try:
                response = jiralib.create_task(
                    row.Projeto, row.Etapa, row.Tarefa, row.Tarefa, row.UUID_Recurso,
                    row.UUID_Recurso, last_story_key, f"{row.Horas}h"
                )
                response.raise_for_status()
                task_key = response.json().get("key")
                print(f"        ‚úÖ Sucesso! Chave da Tarefa: {task_key}")
            except Exception as e:
                print(f"        ‚ùå Falha ao criar Tarefa. Erro: {e}")
                task_key = "ERRO"
        else:
            task_key = row.TicketT
            print(f"    ‚è≠Ô∏è  Pulando Tarefa j√° existente: {row.Tarefa} ({task_key})")
        
        # Adiciona as chaves (novas ou existentes) √†s listas de resultados.
        resultados["Ticket_Epico"].append(last_epic_key)
        resultados["Ticket_Estoria"].append(last_story_key)
        resultados["Ticket_Task"].append(task_key)
        
    print("\nüéâ Integra√ß√£o com o Jira conclu√≠da!")
    return resultados

def atualizar_planilha(arquivo_excel: str, df_original: pd.DataFrame, resultados: Dict[str, List[Any]]):
    """
    Atualiza a planilha original com as chaves dos tickets criados no Jira.
    """
    print("üíæ Atualizando a planilha com os novos tickets...")
    try:
        wb = load_workbook(arquivo_excel)
        ws = wb[ABA_PLANILHA]
        
        # Adiciona as novas colunas ao DataFrame original
        df_original["TicketE"] = resultados["Ticket_Epico"]
        df_original["TicketS"] = resultados["Ticket_Estoria"]
        df_original["TicketT"] = resultados["Ticket_Task"]
        
        # Itera sobre as linhas do DataFrame para atualizar as c√©lulas corretas.
        # Isso √© mais seguro do que apagar e reescrever a planilha inteira.
        rows = dataframe_to_rows(df_original, index=False, header=True)
        
        # Obt√©m o cabe√ßalho para encontrar o √≠ndice das colunas a serem atualizadas.
        header = [cell.value for cell in ws[1]]
        col_indices = {
            "TicketE": header.index("TicketE") + 1,
            "TicketS": header.index("TicketS") + 1,
            "TicketT": header.index("TicketT") + 1
        }

        # Atualiza apenas as c√©lulas necess√°rias, come√ßando da segunda linha (ap√≥s o cabe√ßalho)
        for r_idx, row in enumerate(dataframe_to_rows(df_original, index=False, header=False), 2):
            ws.cell(row=r_idx, column=col_indices["TicketE"], value=row[col_indices["TicketE"]-1])
            ws.cell(row=r_idx, column=col_indices["TicketS"], value=row[col_indices["TicketS"]-1])
            ws.cell(row=r_idx, column=col_indices["TicketT"], value=row[col_indices["TicketT"]-1])

        wb.save(arquivo_excel)
        print("‚úîÔ∏è Planilha salva com sucesso!")

    except Exception as e:
        print(f"‚ùå Erro Cr√≠tico ao salvar a planilha: {e}")

# --- PONTO DE ENTRADA PRINCIPAL ---
# Usar `if __name__ == "__main__":` √© uma conven√ß√£o padr√£o em Python
# que permite que o script seja import√°vel sem executar o c√≥digo principal.
if __name__ == "__main__":
    # 1. Obter o nome do arquivo da linha de comando.
    nome_arquivo = parse_argumentos()
    
    # 2. Carregar as configura√ß√µes do Jira.
    # (Adicione a biblioteca jiralib ao seu ambiente)
    carregar_configuracoes_jira()

    # 3. Ler e preparar os dados da planilha.
    df_processamento = preparar_dataframe(nome_arquivo)
    
    # √â uma boa ideia manter uma c√≥pia do DataFrame original para a grava√ß√£o final.
    df_original = pd.read_excel(nome_arquivo, sheet_name=ABA_PLANILHA, engine="openpyxl")

    # 4. Processar e criar as issues no Jira.
    resultados_jira = processar_issues_jira(df_processamento)

    # 5. Atualizar a planilha com os resultados.
    atualizar_planilha(nome_arquivo, df_original, resultados_jira)

    print("\nüéä Processo finalizado com sucesso! Seu trabalho foi feito! üéä")
